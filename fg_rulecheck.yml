# cli execution best practices:
# https://ansible-galaxy-fortios-docs.readthedocs.io/en/latest/faq.html#how-to-work-with-raw-fotios-cli
# diag firewall iprope lookup <source_ip> <Source_Port>  <destination_ip>  <destination_port>  <tcp or udp> <source_interface>
# diag firewall iprope lookup 10.10.44.46 1234 10.90.1.200 443 tcp Vlan44
# <src [10.10.44.46-1234] dst [10.90.1.200-443] proto tcp dev Vlan44> matches policy id: 4
# <src [10.10.44.46-1234] dst [10.90.1.200-443] proto tcp dev Vlan44> doesn't match any policy.

- set_fact: 
    src_ip: "{{ fw_rules[0].src.addresses[0].ipv4 }}"
    dest_ip: "{{ fw_rules[0].dest.addresses[0].ipv4 }}"
    dest_service: "{{ fw_rules[0].services[0] }}"
    src_intf: "{{ _src_intf }}"

- name: loading mapping file
  ansible.builtin.include_vars:
    file: files/fw_port_mapping.yml
    name: port_map

- name: Prepare The Shell Script Template.
  raw: |
        cat > {{script_path }} << EOF_OUTER
        # /bin/bash
        # Please make sure tool sshpass is installed. e.g. on Debian/Ubuntu, apt-get install sshpass.
        # Optionally you can pass some parameters.
        # The character `a` at second line below is to avoid post-login-banner barrier.
        sshpass -p '{{ fgt_pass }}' ssh -o StrictHostKeyChecking=no {{ fgt_user }}@{{ fgt_host }} <<EOF
        #a
        # ====================== Edit Your Commands Below =============================================
        diag firewall iprope lookup {{ src_ip }} 1234 {{ dest_ip }} {{ port_map[dest_service].port }} {{ port_map[dest_service].proto }} {{ src_intf }}
        # ==============================================================================================
        EOF
        EOF_OUTER
  delegate_to: localhost

- name: Execute The Cli Commands.
  raw: |
          chmod +x {{ script_path }} && {{ script_path }}
  args:
    executable: /bin/bash
  register: _rulecheck
  delegate_to: localhost

- debug: 
    var: _rulecheck
    verbosity: 2

- name: parse policycheck with textfsm
  ansible.utils.cli_parse:
    text: "{{ _rulecheck.stdout }}"
    parser:
      name: ansible.utils.textfsm
      command: diag policy
  register: _parsed_policy

- name: print policy diag result if exists
  debug: 
    msg: "existing policy ID: {{ _parsed_policy.parsed[0].policyid }} found"
  when: _parsed_policy.parsed[0] is defined
  
- name: stop playbook if existing ID found
  ansible.builtin.meta: end_play
  when: 
    - _parsed_policy.parsed[0] is defined 
    - _parsed_policy.parsed[0].policyid != '0'

- debug: 
    var: _parsed_policy
    verbosity: 2